#Funções (Parte 1)
#As funções estão vinculadas a uma palavra: rotina. E quando pensamos na palavra rotina pensamos em uma coisa que fazemos constantemente, por exemplo: uma rotina diária seria acordar, tomar banho, café da manhã, trocar, trabalho.
#Alguns exemplos de funções que já utilizamos ao decorrer das aulas: print(), input(), int(), float(), len(), e tantas outras, e todas são funcionalidades do Python.
#Para declarar uma função em Python nós utilizamos a palavra def e todas as funções em Python são identificadas com parênteses depois do nome.
#O comando def cria comandos personalizados.
#É possível criar um comando personalizado que se adapte ainda mais as minhas necessidades através da utilização de parâmetros.
#Empacotamento de parâmetros: num exemplo em que temos uma função que faça a contagem de números se eu passar contagem(1,2,3,4,5) a minha função vai me dizer que eu passei 5 números, agora se eu passar contagem(1,2,3) ela precisa me dizer que eu passei 3 números. E no Python isso é possível e é o que chamamos de empacotamento, portanto na hora de eu definir a minha função vou passar como parâmetro *núm, assim def contagem(*núm).
#Neste caso jogamos um asterisco e logo em seguida passamos o nosso parâmetro e esse asterisco quer dizer para o Python que você vai passar uma quantidade indeterminada de parâmetros, então se for passado 1 ou 10 jogue todos em núm. E esse asterisco tem o significado de desempacotar.
#Quando eu faço valores = [7, 2, 5, 0, 4] estou trabalhando com listas e sua vantagem é que ela é alterável. E quando eu faço esse tipo de declaração eu pego os valores, 7, 2, 5, 0 e 4 e coloco dentro de uma lista, de uma variável composta, de uma variável única que tem vários valores dentro dela e esses valores são identificados por índices que vão do 0 até o número de elementos que ele vai ter, no nosso caso vão de 0 a 4.
#E se eu quisesse que essa minha lista fosse dobrada, por exemplo: 7 * 2 = 14, isso para todos os elementos, para isso eu poderia ter um comando dobra(valores). Então caso isso se torne uma rotina e eu precise dobrar valores mais vezes eu poderia criar uma função assim: def dobra(lista).
#E neste caso como a lista já é uma variável composta eu posso passar a lista como parâmetro da minha função e a partir daí eu posso fazer o que eu quiser, por exemplo: criar uma variável pos que vai receber o valor 0, daí criar um laço while falando enquanto a minha pos for menor que len(lista), ou seja, que o tamanho da minha lista eu vou fazer que a lista na posição atual receba o dobro dela, assim lista[pos] *= 2. Depois eu faço que pos recebe pos + 1, assim pos += 1. E ao executar essa função eu dobro os valores da minha lista.
